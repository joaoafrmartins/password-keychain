#!/usr/bin/env coffee

require 'shelljs/global'

{ EOL } = require 'os'

minimist = require 'minimist'

confirm = require 'confirm'

passwd = require 'password-generator'

{ resolve } = require 'path'

args = minimist process.argv.slice 2

{
  add,
  get,
  del,
  dump,
  account,
  service,
  password,
  type,
  keychain,
} = args

if not add and not get and not del and not dump

  console.log """

  USAGE:

  password-keychain --add --account foo --service foo.tld [ --password ] [ --keychain ]
  password-keychain --get --account foo | --service foo.tld [ --keychain ]
  password-keychain --del --account foo | --service foo.tld [--keychain]
  password-keychain --dump

  """

keychain ?= resolve __dirname, "..", "password.keychain"

type ?= "internet"

password ?= passwd(args)

params = ""

if account then params += "-a #{account} " else account = ""

if service then params += "-s #{service} " else service = ""

commands =

  keychain: "security create-keychain #{keychain}"

  add: "security add-#{type}-password #{params} -w #{password} #{keychain}"

  get: "security find-#{type}-password #{params} #{keychain}"

  del: "security delete-#{type}-password #{params} #{keychain}"

  find: "security dump #{keychain}"

if not test "-e", keychain

  out = exec(commands.keychain).output

  console.log out

_validate = ->

  if not (account or service)

    throw new Error "invalid arguments account: #{account}, service: #{service}"

if add

  _validate()

  _exec = exec commands.add, { async: true, silent: true }

  _exec.stdout.on "end", ->

    console.log """

    password stored in keychain!

    account:  #{account}
    service:  #{service}
    password: #{password}

    """

else if del

  _validate()

  msg = "Are you shure you want to remove password for account #{account} (y/n)?"

  _confirm = (next) ->

    confirm msg, (err, res) ->

      if err then throw new Error err

      if res.toLowerCase() is "y" then next res

      else if res.toLowerCase() is "n" then process.exit 0

      else _confirm next

  _del = () ->

    out = ""

    _exec = exec commands.del, { async: true, silent: true }

    _exec.stdout.on "end", ->

      console.log """

      password removed from keychain!

      """

  return _confirm _del

else if get

  password = ""

  _validate()

  _exec = exec commands.get, { async: true, silent: true }

  _exec.stdout.on "data", (data) ->

    password = data.toString()

  _exec.stdout.on "end", ->

    if password

      console.log """

      password found!

      account:  #{account}
      password: #{password}

      """

    else

      console.log """

      no password found!

      account:  #{account}

      """

else if dump

  out = ""

  _exec = exec commands.find, { async: true, silent: true }

  _exec.stdout.on "data", (data) ->

    out += data.toString()

  _exec.stdout.on "end", ->

    accounts = []

    a = {}

    for v, i in out.trim().split(EOL)

      if v.indexOf("acct") isnt -1

        a.account = v.split("=").pop().replace(/\"/g, "")

      else if v.indexOf("srvr") isnt -1

        a.service = v.split("=").pop().replace(/\"/g, "")

      if a.service and a.account

        accounts.push a

        a = {}

    console.log EOL + JSON.stringify(accounts, null, 2) + EOL
